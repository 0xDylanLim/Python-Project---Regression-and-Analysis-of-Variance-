import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols

data = pd.read_csv('modified_marketing_and_sales_data.csv')

data.head()
data.shape
data[['TV','Radio','Social_Media']].describe()

# Calculate the average missing rate in the sales column.
missing_sales = data.Sales.isna().mean()

# Convert the missing_sales from a decimal to a percentage and round to 2 decimal places.
missing_sales = round(missing_sales*100, 2)

# Display the results (missing_sales must be converted to a string to be concatenated in the print statement).
print('Percentage of promotions missing Sales: ' +  str(missing_sales) + '%')

data = data.dropna(subset = ['Sales'], axis = 0)
fig = sns.histplot(data['Sales'])
# Add a title
fig.set_title('Distribution of Sales');

sns.pairplot(data);

#build and fit model
# Define the OLS formula.
ols_formula = 'Sales ~ TV'
# Create an OLS model.
OLS = ols(formula = ols_formula, data = data)
# Fit the model.
model = OLS.fit()
# Save the results summary.
model_results = model.summary()
# Display the model results.
model_results

#scatterplot comparing x and sale(y)
sns.scatterplot(x = data['TV'], y = data['Sales']);

# TESTING NORMALITY
# Calculate the residuals.
residuals = model.resid
# Create a 1x2 plot figure.
fig, axes = plt.subplots(1, 2, figsize = (8,4))
# Create a histogram with the residuals .
sns.histplot(residuals, ax=axes[0])
# Set the x label of the residual plot.
axes[0].set_xlabel("Residual Value")
# Set the title of the residual plot.
axes[0].set_title("Histogram of Residuals")
# Create a Q-Q plot of the residuals.
sm.qqplot(residuals, line='s',ax = axes[1])
# Set the title of the Q-Q plot.
axes[1].set_title("Normal Q-Q plot")
# Use matplotlib's tight_layout() function to add space between plots for a cleaner appearance.
plt.tight_layout()
# Show the plot.
plt.show()


# TESTING HOMOSCEDASTICITY
# Create a scatterplot with the fitted values from the model and the residuals.
fig = sns.scatterplot(x = model.fittedvalues, y = model.resid)
# Set the x-axis label.
fig.set_xlabel("Fitted Values")
# Set the y-axis label.
fig.set_ylabel("Residuals")
# Set the title.
fig.set_title("Fitted Values v. Residuals")
# Add a line at y = 0 to visualize the variance of residuals above and below 0.
fig.axhline(0)
# Show the plot.
plt.show()

#Display OLS regression results
model_results
